# ==============================================
# DOCKERFILE PARA BACKEND - PRODUCCIÓN
# ==============================================

# Usar imagen base oficial de Node.js LTS Alpine (más ligera)
FROM node:18-alpine AS base

# Instalar dependencias del sistema necesarias
RUN apk add --no-cache \
    dumb-init \
    curl \
    && rm -rf /var/cache/apk/*

# Crear usuario no-root para seguridad
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodeuser -u 1001

# ==============================================
# STAGE 1: DEPENDENCIES
# ==============================================
FROM base AS deps

# Establecer directorio de trabajo
WORKDIR /app

# Copiar archivos de dependencias
COPY package*.json ./

# Instalar dependencias de producción solamente
RUN npm ci --only=production --silent && npm cache clean --force

# ==============================================
# STAGE 2: BUILD
# ==============================================
FROM base AS build

WORKDIR /app

# Copiar archivos de dependencias
COPY package*.json ./

# Instalar todas las dependencias (incluyendo devDependencies)
RUN npm ci --silent

# Copiar código fuente
COPY . .

# Ejecutar build si existe script de build
RUN npm run build --if-present

# ==============================================
# STAGE 3: RUNTIME
# ==============================================
FROM base AS runtime

# Establecer variables de entorno
ENV NODE_ENV=production
ENV PORT=5000
ENV NPM_CONFIG_LOGLEVEL=warn

# Establecer directorio de trabajo
WORKDIR /app

# Crear directorios necesarios
RUN mkdir -p /app/uploads /app/logs /app/certificates && \
    chown -R nodeuser:nodejs /app

# Copiar dependencias de producción desde stage deps
COPY --from=deps --chown=nodeuser:nodejs /app/node_modules ./node_modules

# Copiar código de aplicación desde stage build
COPY --from=build --chown=nodeuser:nodejs /app/src ./src
COPY --from=build --chown=nodeuser:nodejs /app/package*.json ./

# Copiar archivos de configuración si existen
COPY --chown=nodeuser:nodejs .env.example ./

# Cambiar a usuario no-root
USER nodeuser

# Exponer puerto
EXPOSE 5000

# Configurar healthcheck
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5000/api/health || exit 1

# Usar dumb-init para manejo correcto de señales
ENTRYPOINT ["dumb-init", "--"]

# Comando por defecto
CMD ["node", "src/index.js"]

# ==============================================
# LABELS PARA METADATA
# ==============================================
LABEL maintainer="EduPlatform Team"
LABEL version="1.0.0"
LABEL description="Backend API para plataforma de e-learning"
LABEL org.opencontainers.image.source="https://github.com/yourorg/eduplatform"

# ==============================================
# INSTRUCCIONES DE BUILD
# ==============================================
# Para construir la imagen:
# docker build -f Dockerfile.prod -t eduplatform-backend:latest .
#
# Para ejecutar el contenedor:
# docker run -d \
#   --name eduplatform-backend \
#   -p 5000:5000 \
#   --env-file .env.prod \
#   -v $(pwd)/uploads:/app/uploads \
#   -v $(pwd)/logs:/app/logs \
#   eduplatform-backend:latest
#
# Para ver logs:
# docker logs -f eduplatform-backend
#
# Para acceder al contenedor:
# docker exec -it eduplatform-backend sh

# ==============================================
# OPTIMIZACIONES APLICADAS
# ==============================================
# 1. Multi-stage build para reducir tamaño final
# 2. Imagen Alpine para menor footprint
# 3. Usuario no-root para seguridad
# 4. Solo dependencias de producción en imagen final
# 5. Healthcheck para monitoreo
# 6. dumb-init para manejo correcto de procesos
# 7. Cache de layers optimizado
# 8. Limpieza de cache de npm
# 9. Permisos correctos en directorios
# 10. Variables de entorno optimizadas para producción